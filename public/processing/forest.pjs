/* @pjs preload="/processing/horseman-full-flipped.png"; */
/* @pjs preload="/processing/horseman-full.png"; */
float timer,delta;

float sbottom;
float sleft;
float sright;

float portalTimer;

class Portal{
	public float x,y,w,maxWidth,dw;

	public final int NONE = 0;
	public final int OPENING = 1;
	public final int CLOSING = 2;
	public final int STASIS = 3;

	public int animState;
	private float animtimer;

	Portal(float newX,float newY){
		x = newX;
		y = newY;
		w = 0;
		maxWidth = 10;
		dw = 0.01;
		animState = OPENING;
	}

	public void closeup(){
		animState = CLOSING;
	}

	void draw(float d){
		if(animState == OPENING){
			w += dw*d;
			fill(255);
			stroke(255);
			ellipse(x,y,w*4,w);
			if(w >= maxWidth){
				animState = STASIS;
			  animtimer = millis();
			}
		}
		else if(animState == CLOSING){
			w -= dw*d;
			fill(255);
			stroke(255);
			ellipse(x,y,w*4,w);
			if(w <= 0)
				dw = 0.0;
		}
		else if(animState == STASIS){
			fill(255);
			stroke(255);
			ellipse(x,y,w*4,w);
			if(millis()-animtimer > 3000){
				closeup();
			}
		}
	}
}

class Tree{
	public float x,y,dy,top,maxTop,trunk,leafshadow,z;
	Tree(float newX,float newY,float newDy,float newZ,int topSeed){
		z = newZ;
		x = newX;;
		top = y = newY - z;
		dy = newDy + ((float)random(9))/100.0;
		maxTop = y - random(topSeed) - 50;
		trunk = random(9)+2;
		leafshadow = random(10);
	}

	void draw(float d){
		strokeWeight(1);
		stroke(51+z,51+z,51+z);
		if(top > maxTop)
			top -= (dy)*d;
		else{
			fill(51+z,51+z,51+z);
			triangle(x-32,top-((top-y)*0.8),x,top-34,x+32,top-((top-y)*0.8));
			fill(12+z,12+z,12+z);
			triangle(x+20-leafshadow,top-((top-y)*0.8),x,top-34,x+32,top-((top-y)*0.8));
		}
		strokeWeight(trunk);
		line(x,y,x,top);
	}
}

class Horseman{
	public float x,y,dx;
	public int cur_frame;
	private PImage sprite,sprite_leftward,sprite_rightward;
	public boolean left;
	private float timer;
	private float savedDx;

	private float dy;

	private int animState;
	private final int WALKING = 0;
	private final int RUNNING = 1;
  private final int TURNING = 2;

	private boolean falling;

	private float thewait;

	Horseman(float newX,float newY){
		cur_frame = 0;
		x = newX;
		y = newY;
		dx = -0.04;
		sprite_leftward = loadImage("/processing/horseman-full.png");
		sprite_rightward = loadImage("/processing/horseman-full-flipped.png");
		sprite = sprite_leftward;
		timer = millis();
		left = true;
		savedDx = 0.0;

		dy = 0;
		falling = false;
	
		run();
	}
	void draw(d){
		if(portal != null){
			if(left){
				if(abs(portal.x - x) < 1){
					dy = 10;
					falling = true;
				}
			}
			else{
				if(abs(portal.x - x-16) < 1){
					dy = 10;
					falling = true;
				}
			}
		}

		y += dy;
		if(y > window.innerHeight && falling){
			y = 0;
			falling = false;
		}
		if( (sbottom-34.0) - y < 21.0 && !falling){
			y = sbottom - 34;
			dy = 0.0;
		}
		
		if(x < sleft+55 && animState != TURNING){
			walk();
		}
		else if(x > sright-55 && animState != TURNING){
			walk();
		}
		else if(animState != TURNING){
			run();
		}
		
		if(x < sleft+3){
			x = sleft+4;;
			turn();
		}
		else if(x > sright-30){
			x = sright-31;
			turn();
		}else{
			x += dx*d;
			if(millis()-timer > 200){
				if(left){
					cur_frame += 1;
				}else{
					cur_frame -= 1;
				}
				timer = millis();
			}
		}
		
		if(left){
			if(animState == WALKING){
				/* 5,6 */
				if(cur_frame < 5){
					cur_frame = 6;
				}
				if(cur_frame > 6){
					cur_frame = 5;
				}
			}
			else if(animState == RUNNING){
				/* 0,1,2,3 */
				if(cur_frame < 0){
					cur_frame = 3;
				}
				if(cur_frame > 3){
					cur_frame = 0;
				}
			}
			else if(animState == TURNING){
				/* 7,8 */
				if(cur_frame < 7){
					cur_frame = 7;
				}
				if(cur_frame > 8){
					unturn();
				}
			}
		}
		else{
			if(animState == WALKING){
				/* 3,2 */
				if(cur_frame < 2){
					cur_frame = 3;
				}
				if(cur_frame > 3){
					cur_frame = 2;
				}
			}
			else if(animState == RUNNING){
				/* 8,7,6,5 */
				if(cur_frame < 5){
					cur_frame = 8;
				}
				if(cur_frame > 8){
					cur_frame = 5;
				}
			}
			else if(animState == TURNING){
				/* 1,0 */
				if(cur_frame < 0){
					unturn();
				}
				if(cur_frame > 1){
					cur_frame = 1;
				}
			}
		}
		
		image(sprite.get(cur_frame*32,0,32,32),x,y);
	}

	private void walk(){
		dx = dx < 0 ? -0.02 : 0.02;
		animState = WALKING;
	}
	private void run(){
		dx = dx < 0 ? -0.05 : 0.05;
		animState = RUNNING;
	}
	private void turn(){
		savedDx = dx;
		dx = 0.0;
		animState = TURNING;
		y += 2;
	}
	private void unturn(){
		dx = savedDx*-0.1;
		animState = WALKING;
		y -= 2;
		left = !left;
		if(left){
			sprite = sprite_leftward;
			cur_frame = 5;
		}
		else{
			sprite = sprite_rightward;
			cur_frame = 3;
		}
	}
}

Tree trees[];
Horseman horseman;
Portal portal;

void createAnimation(){
	background(255);
	frameRate(30);

	sright  = window.innerWidth-144;
	sleft   = 144;
	/* the smaller the width the further we push the animation down*/
	sbottom = window.innerHeight*0.85;

	if(window.innerWidth < 770){
		sbottom += 90;
	}
	sbottom = max(400+55+60,sbottom);
	
	portal = null;

	int numTrees = (int)(sright/50);
	numTrees = numTrees % 2 == 0 ? numTrees : numTrees + 1;
	trees = new Tree[numTrees];
	
	for(int i=0;i < trees.length; i++){
		if(i < numTrees/2)
			z = 21;
		else
			z = 0;
		
		float randomness = random((window.innerWidth/numTrees)*0.6);
		randomness *= random(100) >= 50 ? -1 : 1;
		float adjustment = sleft + 10;
		float z_adj = (i%(numTrees/2))*2*(sright-sleft)/numTrees;

		float maxTreeHeight = window.innerHeight/2;
		float heightMultiplier = maxTreeHeight/numTrees;

		trees[i] = new Tree(max(min(randomness+adjustment+z_adj,window.innerWidth-144),sleft+25),sbottom,0.04,z,min( ((i%(numTrees/2))*heightMultiplier)+50,maxTreeHeight));
	}
	horseman = new Horseman(0.75*sright,sbottom-34);
	smooth();
	timer = millis();

	portalTimer = millis();
}

void setup(){
	size(window.innerWidth,max(window.innerHeight,400+55+80));
	createAnimation();
}

void draw(){
	delta = millis() - timer;
	timer = millis();

	background(255);

	for(int i=0;i < trees.length/2; i++){
		trees[i].draw(delta);
	}

	noStroke();
	fill(90,90,90);
	quad(sleft,sbottom,sright,sbottom,sright-10,sbottom-21,sleft+10,sbottom-21);

	if(millis() - portalTimer > 5000){
		portal = new Portal(random(sright-sleft-34)+sleft+34,sbottom-11);
		portalTimer = millis();
	}
	if(portal != null)
		portal.draw(delta);

	horseman.draw(delta);

	for(int i=trees.length/2;i < trees.length; i++){
		trees[i].draw(delta);
	}
}

void reSize(int w, int h) {
	size(w, max(h,400+55+80));
	createAnimation();
}
