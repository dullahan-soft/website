/* @pjs preload="horseman-with-cape.png"; */

float timer,delta;

class Tree{
	public float x,y,dy,top,maxTop,trunk,leafshadow,z;
	Tree(float newX,float newY,float newDy,float newZ){
		z = newZ;
		x = newX;;
		top = y = newY - z;
		dy = newDy + ((float)random(9))/100.0;
		maxTop = y - random(200) - 50;
		trunk = random(9)+2;
		leafshadow = random(10);
	}

	void draw(float d){
		strokeWeight(1);
		stroke(51+z,51+z,51+z);
		if(top > maxTop)
			top -= (dy)*d;
		else{
			fill(51+z,51+z,51+z);
			triangle(x-32,top-((top-y)*0.8),x,top-34,x+32,top-((top-y)*0.8));
			fill(12+z,12+z,12+z);
			triangle(x+20-leafshadow,top-((top-y)*0.8),x,top-34,x+32,top-((top-y)*0.8));
		}
		strokeWeight(trunk);
		line(x,y,x,top);
	}
}

class Horseman{
	public float x,y,dx;
	public int cur_frame;
	private PImage sprite;
	Horseman(float newX,float newY,float newDx){
		cur_frame = 0;
		x = newX;
		y = newY;
		dx = newDx;
		frames = loadImage("horseman-with-cape.png");
	}
	void draw(d){
		if(x < 403 || x > 1393)
			dx *= -1.0;
		x += dx*d;
		cur_frame += 1;
		if(cur_frame > 4){
			cur_frame = 0;
		}
		image(sprite.get(cur_frame*16,0,16,16),x,y);
	}
}

Tree trees[];
Horseman horseman;

void setup(){
	size(1500,500);
	background(255);
	frameRate(30);

	trees = new Tree[20];
	for(int i=0;i < trees.length; i++){
		if(i < 10)
			z = 21;
		else
			z = 0;
		trees[i] = new Tree(random(100)+400+((i%10)*100),400,0.04,z);
	}
	horseman = new Horseman(1300,400-10,-0.08);
	smooth();
	timer = millis();
}

void draw(){
	delta = millis() - timer;
	timer = millis();

	background(255);

	for(int i=0;i < trees.length/2; i++){
		trees[i].draw(delta);
	}
	noStroke();
	fill(90,90,90);
	quad(400,400,1400,400,1400-10,400-21,400+10,400-21);
	horseman.draw(delta);
	for(int i=trees.length/2;i < trees.length; i++){
		trees[i].draw(delta);
	}
}
